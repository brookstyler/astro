#COMFIX TEST code
#TYLER BROOKS
#12/8/17

from astro import COMFIXfunctions as func
import numpy as np
deg2rad = np.pi/180
rad2deg = 180/np.pi
eartha = 6378.137
earthe = 0.08182

#All tests use check data pulled directly from COMFIX_solution.txt

#I am setting a tolerance of 10**-3 on most/all tests simply because
#numbers to different levels of precision are difficult to work with
#in these functions

def test_ela2ecef():
    lat = 77.7000*deg2rad
    longit = -68.5000*deg2rad
    h = 50.0000*1000**-1
        #all given data
    N = (eartha)/(1 - (earthe**2 * (np.sin(lat))**2))**.5

    recef = func.ela2ecef(lat, longit, h, N)
    recef = recef.getA1()
        #crunching into array for testing purposes

    site_ecef = np.array([499.5815 ,    -1268.2616 ,    6209.9355])

    np.testing.assert_allclose(recef, site_ecef, rtol = 10**-3)



def test_ecef2eci():
    lat = 77.7000*deg2rad
    longit = -68.5000*deg2rad
    recef = np.matrix([[499.5815] ,    [-1268.2616] ,    [6209.9355]])
    gst =  3.528788977

    reci = func.ecef2eci(lat, longit, recef, gst)
    reci = reci.getA1()
    reci_expected = np.array([-941.4859,      985.7350,    6209.9360])

    np.testing.assert_allclose(reci, reci_expected, rtol = 10**-3)


def test_rv2pos():
    rho = 2121.418
    azm = 0.330924898154
    ele = 0.616986107885
    rhor = -3.3204
    azmr = -0.00133570047655
    eler = 0.00355471208754

    """
    #Below I've included the radian-based numbers from the solutions text file
    #which did not satisfy this test. There is a distinctly different result
    #gained from these values, so instead I've used the values generated by
    #my function above.

    rho = 2121.4180
    azm = 0.3309
    ele = 0.6170
    rhor = -3.3204
    azmr = -0.0013
    eler = 0.0036
    """

    (rsez, vsez) = func.rvtopos(rho, azm, ele, rhor, azmr, eler)
    rsez = rsez.getA1()
    vsez = vsez.getA1()

    rho_sez   =    np.array([-1636.4022,      562.2001,     1227.4091])
    drho_sez  =    np.array([5.9367,       -4.4833,       4.2295])

    np.testing.assert_allclose(rsez, rho_sez, rtol = 10**-3)
    np.testing.assert_allclose(vsez, drho_sez, rtol = 10**-3)


def test_sez2eci():
    lat = 77.7000*deg2rad
    lst  =  2.333238439
    rho_sez   =    np.matrix([[-1636.4022],     [562.2001],     [1227.4091]])
    drho_sez  =    np.matrix([[5.9367],       [-4.4833],       [4.2295]])

    (reci, veci)=func.sez2eci(lat, lst, rho_sez, drho_sez)
    reci = reci.getA1()
    veci = veci.getA1()



    rho_eci   =      np.array([517.1476,    -1355.4225,     1547.8381])
    drho_eci  =      np.array([-1.3865,        7.9427,        2.8678])

    np.testing.assert_allclose(reci, rho_eci, rtol = 10**-3)
    np.testing.assert_allclose(veci, drho_eci, rtol = 10**-3)

def test_finish():
    Reci = np.matrix([[-941.4859],      [985.7350],    [6209.9360]])
    reci=      np.matrix([[517.1476],    [-1355.4225],     [1547.8381]])
    veci=      np.matrix([[-1.3865],        [7.9427],        [2.8678]])

    (rfeci, vfeci) = func.finish(Reci, reci, veci)
    rfeci = rfeci.getA1()


    pos_eci   =     np.array([-424.3383,     -369.6874,     7757.7741])
    vel_eci   =     np.array([ -1.3595,        7.9118,        2.8678])

    np.testing.assert_allclose(rfeci, pos_eci, rtol = 10**-3)
    np.testing.assert_allclose(vfeci, vel_eci, rtol = 10**-3)
